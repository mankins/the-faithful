rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

   function getEntitlements (doc) {
    return doc.data.entitlements;   
   }

	function isIn (lookingFor, doc) {
    return (lookingFor in getEntitlements(doc));
  }

  match /announce/{email} {
      allow read: if (request.auth.uid != null) && ((request.auth.uid == resource.data.uid) || resource == null);
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if (request.auth.uid != null) && (request.auth.uid == request.resource.data.uid);
    }
    
    match /users/{userId} {
      allow read: if (request.auth.uid != null) && ((request.auth.uid == resource.data.uid) || resource == null);
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
      allow create: if (request.auth.uid != null) && (request.auth.uid == request.resource.data.uid);
    }

    match /email/{email}/receipts/{receiptId} {
      allow read: if (request.auth.uid != null) && ((request.auth.token.email == email) || resource == null);
    }

    match /events/{eventId} {
      allow read: if (request.auth.uid != null) && (request.auth.token.email != null) && isIn('site:admin', get(/databases/$(database)/documents/email/$(request.auth.token.email))) || resource == null;
    }

    match /email/{emailId} {
      allow read: if (request.auth.uid != null) && (request.auth.token.email != null) && isIn('site:admin', get(/databases/$(database)/documents/email/$(request.auth.token.email))) || resource == null;
    }

    
    }

}