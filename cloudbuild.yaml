timeout: 1200s
steps:
  - id: "cloud functions install"
    name: 'gcr.io/cloud-builders/npm'
    args: ['install']
    waitFor: ['-']
    dir: 'functions'

  - id: "cloud functions deploy - slackRelay"
    name: 'gcr.io/cloud-builders/gcloud'
    args: ['functions', 'deploy', 'slackRelay', '--source=.', '--trigger-http', '--runtime', 'nodejs14', '--entry-point=slackRelay', '--allow-unauthenticated', '--region', "${_REGION}", '--memory=256']
    waitFor: ["cloud functions install"]
    dir: 'functions'

  # - id: "cloud functions deploy - transcoderIn"
  #   name: 'gcr.io/cloud-builders/gcloud'
  #   args: ['functions', 'deploy', 'transcoderIn', '--source=.', '--trigger-resource', 'video.the-faithful.com', '--trigger-event', 'google.storage.object.finalize', '--runtime', 'nodejs14', '--entry-point=transcoderIn', '--region', "${_REGION}", '--memory=256']
  #   waitFor: ["cloud functions install"]
  #   dir: 'functions'

  - id: "cloud functions deploy - stripeCheckoutSession"
    name: 'gcr.io/cloud-builders/gcloud'
    args: ['functions', 'deploy', 'stripeCheckoutSession', '--source=.', '--trigger-http', '--runtime', 'nodejs14', '--entry-point=stripeCheckoutSession', '--allow-unauthenticated', '--region', "${_REGION}", '--memory=256']
    waitFor: ["cloud functions install"]
    dir: 'functions'

  - id: "cloud functions deploy - stripeCheckoutSuccess"
    name: 'gcr.io/cloud-builders/gcloud'
    args: ['functions', 'deploy', 'stripeCheckoutSuccess', '--source=.', '--trigger-http', '--runtime', 'nodejs14', '--entry-point=stripeCheckoutSuccess', '--allow-unauthenticated', '--region', "${_REGION}", '--memory=256']
    waitFor: ["cloud functions install"]
    dir: 'functions'

  - id: "cloud functions deploy - userEntitlements"
    name: 'gcr.io/cloud-builders/gcloud'
    args: ['functions', 'deploy', 'userEntitlements', '--source=.', '--trigger-http', '--runtime', 'nodejs14', '--entry-point=userEntitlements', '--allow-unauthenticated', '--region', "${_REGION}", '--memory=256']
    waitFor: ["cloud functions install"]
    dir: 'functions'

  - id: "cloud functions deploy - oauthAuthorize"
    name: 'gcr.io/cloud-builders/gcloud'
    args: ['functions', 'deploy', 'oauthAuthorize', '--source=.', '--trigger-http', '--runtime', 'nodejs14', '--entry-point=oauthAuthorize', '--allow-unauthenticated', '--region', "${_REGION}", '--memory=256']
    waitFor: ["cloud functions install"]
    dir: 'functions'

  - id: "build image - ssr"
    name: 'gcr.io/kaniko-project/executor:latest'
    waitFor: ['-']
    args: ["--destination=gcr.io/${PROJECT_ID}/${_SERVICE_NAME}",'--cache=true','--cache-ttl=4h', '--build-arg', "COMMIT_SHA=${SHORT_SHA}"]
 
  - id: "build image - ingress"
    name: "gcr.io/cloud-builders/docker"
    waitFor: ['-']
    args: ["build", "-t", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}-ingress", "infra/ingress"]

  - id: "build image - tracking-proxy"
    name: "gcr.io/cloud-builders/docker"
    waitFor: ['-']
    args: ["build", "-t", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}-tracking-proxy", "infra/tracking-proxy"]

  - id: "push image - ingress"
    name: "gcr.io/cloud-builders/docker"
    waitFor: ['build image - ingress']
    args: ["push", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}-ingress"]

  - id: "push image - tracking-proxy"
    name: "gcr.io/cloud-builders/docker"
    waitFor: ['build image - tracking-proxy']
    args: ["push", "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}-tracking-proxy"]

  - id: "deploy prod service"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    waitFor: ['build image - ssr']
    args:
      [
        "run",
        "deploy",
        "${_SERVICE_NAME}",
        "--platform",
        "managed",
        "--region",
        "${_REGION}",
        "--allow-unauthenticated",
        "--image",
        "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}",
      ]

  # Force the new revision to serve 100% of traffic.
  - id: "ensure prod service live"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    waitFor: ['deploy prod service']
    args:
      [
        "run",
        "services",
        "update-traffic",
        "${_SERVICE_NAME}",
        "--to-latest",
        "--platform",
        "managed",
        "--region",
        "${_REGION}",
      ]

  - id: "deploy prod service - ingress"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    waitFor: ['push image - ingress']
    args:
      [
        "run",
        "deploy",
        "${_SERVICE_NAME}-ingress",
        "--platform",
        "managed",
        "--region",
        "${_REGION}",
        "--allow-unauthenticated",
        "--image",
        "gcr.io/${PROJECT_ID}/${_SERVICE_NAME}-ingress",
      ]

  # Force the new revision to serve 100% of traffic.
  - id: "ensure prod service live - ingress"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    waitFor: ['deploy prod service - ingress']
    args:
      [
        "run",
        "services",
        "update-traffic",
        "${_SERVICE_NAME}-ingress",
        "--to-latest",
        "--platform",
        "managed",
        "--region",
        "${_REGION}",
      ]

substitutions:
  _SERVICE_NAME: the-faithful-ssr
  _REGION: us-central1
